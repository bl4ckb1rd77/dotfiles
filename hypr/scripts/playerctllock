#!/bin/bash

## vars
cache_dir="$HOME/.cache"
cache_file="$cache_dir/albumart.txt"
albumurl="/tmp/.albumart.png"
cached_data=""

help () {
	echo "Usage: $0 --title | --arturl | --artist | --length | --album | --source | --status"
	exit 1
}

if [ $# -eq 0 ]; then
  help
fi

# Function to get metadata using playerctl
get_metadata() {
	key=$1
	playerctl -p ncspot metadata --format "{{ $key }}" 2>/dev/null
}

get_art () {
  if [ -f $cache_file ]; then cached_data=$(<"$cache_file"); fi
	url=$(get_metadata "mpris:artUrl")
  echo $url > $cache_file
  if [ "$cached_data" != "$url" ]; then
    wget -O $albumurl.tmp "$url"
    convert $albumurl.tmp $albumurl
  fi

}

# Function to determine the source and return an icon and text
get_source_info() {
	trackid=$(get_metadata "mpris:trackid")
	if [[ "$trackid" == *"firefox"* ]]; then
		echo -e "󰈹 Firefox"
	elif [[ "$trackid" == *"spotify"* ]]; then
		echo -e " Spotify"
	elif [[ "$trackid" == *"chromium"* ]]; then
		echo -e " Chrome"
	else
		echo ""
	fi
}

# Parse the argument
case "$1" in
--title)
	title=$(get_metadata "xesam:title")
	if [ -z "$title" ]; then
		echo ""
	else
		echo "${title:0:28} ||" # Limit the output to 50 characters
	fi
	;;
--arturl)
  get_art
  echo "$albumurl"
	;;
--artist)
	artist=$(get_metadata "xesam:artist")
	if [ -z "$artist" ]; then
		echo ""
	else
		echo "${artist:0:30}" # Limit the output to 50 characters
	fi
	;;
--length)
	length=$(get_metadata "mpris:length")
	if [ -z "$length" ]; then
		echo ""
	else
		# Convert length from microseconds to a more readable format (seconds)
		echo "$(echo "scale=2; $length / 1000000 / 60" | bc) m"
	fi
	;;
--status)
	status=$(playerctl -p ncspot status 2>/dev/null)
	if [[ $status == "Playing" ]]; then
		echo " "
	elif [[ $status == "Paused" ]]; then
		echo " "
	else
		echo ""
	fi
	;;
--album)
	album=$(get_metadata "xesam:album")
	if [[ -n $album ]]; then
		echo "$album"
	else
		status=$(playerctl -p ncspot status 2>/dev/null)
		if [[ -n $status ]]; then
			echo "Not album"
		else
			echo ""
		fi
	fi
	;;
--source)
	get_source_info
	;;
*)
	echo "Invalid option: $1"
  help
  ;;
esac
